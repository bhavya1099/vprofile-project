// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=getWorkingExperience_d0e066185f
ROOST_METHOD_SIG_HASH=getWorkingExperience_a3b26616b5
Scenario 1: Test to check if the method returns the correct working experience
Details:
  TestName: testGetWorkingExperience.
  Description: This test is meant to check if the 'getWorkingExperience' method returns the correct working experience of the user.
Execution:
  Arrange: Create a User object and set its workingExperience attribute using the 'setWorkingExperience' method.
  Act: Invoke the 'getWorkingExperience' method on the User object.
  Assert: Use JUnit assertions to compare the returned value against the expected working experience.
Validation:
  The assertion aims to verify that the 'getWorkingExperience' method correctly retrieves the user's working experience. The expected result is the value set using the 'setWorkingExperience' method. This test is significant in ensuring that the method accurately reflects the user's working experience.
Scenario 2: Test to check if the method returns null when no working experience is set
Details:
  TestName: testGetWorkingExperienceReturnsNull.
  Description: This test is meant to check if the 'getWorkingExperience' method returns null when no working experience is set for the user.
Execution:
  Arrange: Create a User object without setting its workingExperience attribute.
  Act: Invoke the 'getWorkingExperience' method on the User object.
  Assert: Use JUnit assertions to check if the returned value is null.
Validation:
  The assertion aims to verify that the 'getWorkingExperience' method returns null when no working experience is set for the user. This test is significant in ensuring that the method handles the scenario where no working experience is set for a user.
Scenario 3: Test to check if the method returns the correct working experience after updating it
Details:
  TestName: testGetWorkingExperienceAfterUpdate.
  Description: This test is meant to check if the 'getWorkingExperience' method returns the correct working experience after it has been updated.
Execution:
  Arrange: Create a User object and set its workingExperience attribute using the 'setWorkingExperience' method. Then update the workingExperience using the 'setWorkingExperience' method again.
  Act: Invoke the 'getWorkingExperience' method on the User object.
  Assert: Use JUnit assertions to compare the returned value against the updated working experience.
Validation:
  The assertion aims to verify that the 'getWorkingExperience' method correctly retrieves the updated working experience of the user. The expected result is the updated value set using the 'setWorkingExperience' method. This test is significant in ensuring that the method accurately reflects the updated working experience of the user.
*/
// ********RoostGPT********
package com.visualpathit.account.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import javax.persistence.*;
import java.io.Serializable;
import java.util.Set;
import org.junit.experimental.categories.Category;

@Category({ Categories.getWorkingExperience.class })
public class UserGetWorkingExperienceTest {

	private User user;

	@Before
	public void setUp() {
		user = new User();
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetWorkingExperience() {
		String expectedWorkingExperience = "5 years";
		user.setWorkingExperience(expectedWorkingExperience);
		String actualWorkingExperience = user.getWorkingExperience();
		assertEquals(expectedWorkingExperience, actualWorkingExperience);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetWorkingExperienceReturnsNull() {
		String actualWorkingExperience = user.getWorkingExperience();
		assertNull(actualWorkingExperience);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetWorkingExperienceAfterUpdate() {
		String initialWorkingExperience = "5 years";
		user.setWorkingExperience(initialWorkingExperience);
		String updatedWorkingExperience = "10 years";
		user.setWorkingExperience(updatedWorkingExperience);
		String actualWorkingExperience = user.getWorkingExperience();
		assertEquals(updatedWorkingExperience, actualWorkingExperience);
	}

}